name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  TERRAGRUNT_WORKING_DIR: infrastructure/live/envs/dev
  GCP_REGION: "europe-west1"
  GKE_CLUSTER_NAME: "gke-dev"
  VPC_NAME: "vpc-dev"
  SUBNET_NAME: "subnet-dev"
  AUTH_ARTIFACT_REPO: ${{ secrets.AUTH_ARTIFACT_REPO }}
  WORKOUT_ARTIFACT_REPO: ${{ secrets.WORKOUT_ARTIFACT_REPO }}
  ANALYTICS_ARTIFACT_REPO: ${{ secrets.ANALYTICS_ARTIFACT_REPO }}

jobs:
  setup-infrastructure:
    name: Setup GKE and VPC with Terraform and Terragrunt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
          export_default_credentials: true

      - name: Install Terraform v1.9.5 and Terragrunt v0.67.1
        run: |
          sudo apt-get update && sudo apt-get install -y unzip
          curl -LO https://releases.hashicorp.com/terraform/1.9.5/terraform_1.9.5_linux_amd64.zip
          unzip terraform_1.9.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.67.1/terragrunt_linux_amd64 -o terragrunt
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Initialize and apply Terragrunt
        run: |
          terragrunt init
          terragrunt apply -auto-approve

  build-and-push:
    name: Build and Push Docker Images to Artifact Registry
    runs-on: ubuntu-latest
    needs: setup-infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
          export_default_credentials: true

      - name: Configure Docker to use Artifact Registry
        run: |
          echo "Configuring Docker to use Artifact Registry repositories..."
          gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Build and Push Auth Service Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URI=${{ env.AUTH_ARTIFACT_REPO }}/auth-service:${IMAGE_TAG}
          LATEST_IMAGE_URI=${{ env.AUTH_ARTIFACT_REPO }}/auth-service:latest

          echo "Building Auth Service Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI ./services/auth_service

          echo "Pushing Auth Service Docker image to Artifact Registry..."
          docker push $IMAGE_URI

          echo "Tagging the image as 'latest' and pushing..."
          docker tag $IMAGE_URI $LATEST_IMAGE_URI
          docker push $LATEST_IMAGE_URI

      - name: Build and Push Workout Service Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URI=${{ env.WORKOUT_ARTIFACT_REPO }}/workout-service:${IMAGE_TAG}
          LATEST_IMAGE_URI=${{ env.WORKOUT_ARTIFACT_REPO }}/workout-service:latest

          echo "Building Workout Service Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI ./services/workout_service

          echo "Pushing Workout Service Docker image to Artifact Registry..."
          docker push $IMAGE_URI

          echo "Tagging the image as 'latest' and pushing..."
          docker tag $IMAGE_URI $LATEST_IMAGE_URI
          docker push $LATEST_IMAGE_URI

      - name: Build and Push Analytics Service Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_URI=${{ env.ANALYTICS_ARTIFACT_REPO }}/analytics-service:${IMAGE_TAG}
          LATEST_IMAGE_URI=${{ env.ANALYTICS_ARTIFACT_REPO }}/analytics-service:latest

          echo "Building Analytics Service Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI ./services/analytics_service

          echo "Pushing Analytics Service Docker image to Artifact Registry..."
          docker push $IMAGE_URI

          echo "Tagging the image as 'latest' and pushing..."
          docker tag $IMAGE_URI $LATEST_IMAGE_URI
          docker push $LATEST_IMAGE_URI

  run-tests:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Python and Dependencies
        run: |
          sudo apt-get install -y python3-pip
          pip3 install pytest requests

      - name: Run End-to-End Tests
        run: |
          pytest --junitxml=results.xml tests/e2/test_e2e.py

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: results.xml
