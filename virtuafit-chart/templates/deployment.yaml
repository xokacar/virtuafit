{{- range $key, $service := .Values.services }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $service.name }}
  namespace: {{ $.Values.app.namespace }}
spec:
  replicas: {{ $.Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $service.name }}
  template:
    metadata:
      labels:
        app: {{ $service.name }}
        version: {{ $service.image.tag | default "latest" | quote }}
    spec:
      serviceAccountName: {{ $service.name }}-svc-account
      containers:
      - name: {{ $service.name }}
        image: "{{ $service.image.repository }}:{{ $service.image.tag | default 'latest' }}"
        imagePullPolicy: {{ $service.image.pullPolicy | default "Always" }}
        ports:
        - containerPort: {{ $service.ports.http }}
        readinessProbe:
          httpGet:
            path: {{ $service.probes.path | quote }}
            port: {{ $service.ports.http }}
          initialDelaySeconds: {{ $service.probes.initialDelaySeconds }}
        livenessProbe:
          httpGet:
            path: {{ $service.probes.path | quote }}
            port: {{ $service.ports.http }}
          initialDelaySeconds: {{ $service.probes.initialDelaySeconds }}
        env:
        {{- range $.Values.envVariables }}
        - name: {{ .name | quote }}
          value: {{ .value | quote }}
        {{- end }}
        {{- range $.Values.secretEnvVariables }}
        - name: {{ .name | quote }}
          valueFrom:
            secretKeyRef:
              name: {{ .secretName | quote }}
              key: {{ .secretKey | quote }}
        {{- end }}
        volumeMounts:
          - name: secrets-store-inline
            mountPath: /mnt/secrets-store
            readOnly: true

      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "secrets"
{{- end }}
